.popover-container {
    position: relative;
}

/**
 * Default popovers are used to show a list of options above a component.
 */

.popover {
    position: absolute;
    bottom: calc(100% + 1.5em);
    left: 0;
    right: 0;
    background-image: linear-gradient(to bottom, map-get($button-colors, "start"), map-get($button-colors, "end"));
    border-radius: 3px;
    box-shadow: 0 2px 3px rgba(#333, 0.5);
    opacity: 0;
    transform: translateY(20%);
    transition: transform 0.1s ease-in-out, opacity 0.1s ease-in-out, visibility 0 linear 0.1s;
    visibility: hidden;
    overflow: hidden;
    color: #fff;

    &.is-visible {
        opacity: 1;
        transform: translateY(0);
        transition-delay: 0;
        visibility: visible;
    }
}

/**
 * Informational popovers are used to show small bits of text above a component.
 * Don't include complex child elements in informational popovers.
 */

.popover-informational {
    left: 1.5em;
    right: 1.5em;
    background-image: none;
    background-color: rgba(#333, 0.85);
    padding: 0.75em 1.5em !important;

    .popover-container:hover & {
        opacity: 1;
        transform: translateY(0);
        transition-delay: 0;
        visibility: visible;
        z-index: 2;
    }
}

.popover-item {
    position: relative;
    padding: 0.75em;
    text-align: left;
    border-bottom: 1px solid lighten(map-get($button-colors, "start"), 10%);
    transition: background-color 0.1s ease-in-out;
    z-index: 1;
    cursor: pointer;

    &::before {
        content: "";
        position: absolute;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        background-image: linear-gradient(to bottom, rgba(#fff, 0.2), rgba(#fff, 0.1));
        opacity: 0;
        z-index: -1;
        transition: opacity 0.1s ease-in-out;
        will-change: opacity;
    }

    &:hover::before {
        opacity: 1;
    }

    &::after {
        @extend %icon;
        content: "\e902";
        position: absolute;
        right: 0.75em;
        opacity: 0;
        transition: opacity 0.1s ease-in-out;
    }

    &.is-selected::after {
        opacity: 1;
    }

    &:last-child {
        border-bottom: 0;
    }

    [data-col]:first-child & {
        border-right: 1px solid lighten(map-get($button-colors, "start"), 10%);
    }
}
